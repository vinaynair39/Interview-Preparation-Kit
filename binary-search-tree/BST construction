class BST:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

    def insert(self, value):
        currentNode = self
        while True:
            if value < currentNode.value:
                if currentNode.left is None:
                    currentNode.left = BST(value)
                    break
                else:
                    currentNode = currentNode.left
            else:
                if currentNode.right is None:
                    currentNode.right = BST(value)
                    break
                else:
                    currentNode = currentNode.right
        return self

    def contains(self, value):
        cn = self
        while cn is not None:
            if value < cn.value:
                cn = cn.left
            elif value > cn.value:
                cn = cn.right
            else:
                return True

        return False

    def remove(self, value, parentNode = None):
        cn = self
        while cn is not None:
            if value < cn.value:
                parentNode = cn
                cn = cn.left
            elif value > cn.value:
                parentNode = cn
                cn = cn.right
            else:
                if cn.left is not None and cn.right is not None:
                    cn.value = cn.right.getMinValue()
                    cn.right.remove(cn.value, parentNode)
                elif parentNode is None:
                    if cn.left is not None:
                        cn.value = cn.left.value
                        cn.right = cn.left.right
                        cn.left = cn.left.left
                    elif cn.right is not None:
                        cn.value = cn.right.value
                        cn.left = cn.right.left
                        cn.right = cn.right.right
                    else:
                        cn = None
                elif parentNode.left == cn:
                    parentNode.left = cn.left if cn.left is not None else cn.right
                elif parentNode.right == cn:
                    parentNode.right = cn.right if cn.right is not None else cn.left
                break
        return self


    def getMinValue(self):
        cn = self
        while cn.left is not None:
            cn = cn.left

        return cn.value

    def inOrderTraverse(self, tree, array = []):
        if tree is not None:
            self.inOrderTraverse(tree.left, array)
            array.append(tree.value)
            self.inOrderTraverse(tree.right, array)
        return array

    def preOrderTraverse(self, tree, array=[]):
        if tree is not None:
            array.append(tree.value)
            self.preOrderTraverse(tree.left, array)
            self.preOrderTraverse(tree.right, array)
        return array

    def postOrderTraverse(self, tree, array=[]):
        if tree is not None:
            self.postOrderTraverse(tree.left, array)
            self.postOrderTraverse(tree.right, array)
            array.append(tree.value)
        return array

    def root(self):
        return self.value

if __name__ == "__main__":
    tree = BST(10)
    tree.insert(5).insert(11).insert(15).insert(3)
    print(tree.inOrderTraverse(tree))
    print(tree.preOrderTraverse(tree))
    print(tree.postOrderTraverse(tree))

    tree.remove(10)
    tree.remove(15)
    print(tree.inOrderTraverse(tree, []))
    print(tree.root())
