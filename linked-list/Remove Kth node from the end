# This is an input class. Do not edit.
class LinkedList:
    def __init__(self, value):
        self.value = value
        self.next = None


def removeKthNodeFromEnd(head, k):
	counter = 1
	first = head
	second = head
	while counter <= k:
		second = second.next
		counter += 1
	if second is None:
		head.value = head.next.value
		head.next = head.next.next
		return
	while second.next is not None:
		second = second.next
		first = first.next
	first.next = first.next.next
	
  
// my code

# This is an input class. Do not edit.
class LinkedList:
    def __init__(self, value):
        self.value = value
        self.next = None


def removeKthNodeFromEnd(head, k):
	memoize = dict()
	node = head
	count = 0
	while node is not None:
		memoize[count] = node.value
		node = node.next
		count += 1
	remove(head, memoize[count - k])
	
def remove(head, value):
	node = head
	if node.value == value:
		head = node.next
	while node.next.value != value:
		node = node.next
	removeBindings(node)	
	
def removeBindings(node):
	node.next = node.next.next
		
